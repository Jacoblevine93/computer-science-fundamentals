Exercises

1. What are some pros and cons of using linked lists instead of arrays?

A: Better for memory usage, can be hard to manipulate.

2. Come up with a real world example of a linked list.

A: A blockchain is essentially an advanced linked list with a hashing function rather than a pointer. 

Programming Questions

1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

The function places the new node next to the head rather than at the end of the list. 

FUNCTION push(element)
 CREATE node
 SET node.value TO element
 SET node.next TO null

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current to head
   WHILE current.next
   	SET current TO current.next
   END WHILE
 SET current.next TO node
 END IF
END FUNCTION

2. Given an unsorted singly linked list, remove all duplicates from the linked list.

class LinkedList {
	constructor() {
		this.head = null;
	}
}

class Node {
	constructor(val) {
		this.value = val;
		this.next = null;
	}
}

function removeDuplicates(list){
  var node = list.head;
  var array = [];
  array.push(node.value);
 
  while(node.next){
    if(array.indexOf(node.next.value) != -1){
       node.next = node.next.next;
     } 
     else {
       array.push(node.next.value);
       node = node.next;
     }
  }
  
  return list;
};

var list = new LinkedList();
var n1 = new Node('a');
var n2 = new Node('c');
var n3 = new Node('d');
var n4 = new Node('d');
var n5 = new Node('a');

list.head = n1;
n1.next = n2;
n2.next = n3;
n3.next = n4;
n4.next = n5;

removeDuplicates(list);

3. Given an unsorted singly linked list, reverse it.

class LinkedList {
	constructor() {
		this.head = null;
	}
}

class Node {
	constructor(val) {
		this.value = val;
		this.next = null;
	}
}

function reverseList(list) {
	var current = list.head;
	var prev = null;

	while(current) {
		next = current.next;
		current.next = prev;
		prev = current;
		current = next;
	}
	return prev;
}

var list = new LinkedList();
var n1 = new Node('a');
var n2 = new Node('b');
var n3 = new Node('c');
var n4 = new Node('d');

list.head = n1;
n1.next = n2;
n2.next = n3;
n3.next = n4;
