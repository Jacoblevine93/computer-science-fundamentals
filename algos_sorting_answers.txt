1. Write pseudocode for bubble sort.

A:

FUNCTION bubbleSort(collection)
   REPEAT
     SET swapped to false
     FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
       IF collection[i] > collection[i + 1] THEN
         SET tmp to collection[i]
         SET collection[i] to collection[i + 1]
         SET collection[i + 1] to tmp
         SET swapped to true
       END IF
     END FOR
   UNTIL swapped is FALSE

   RETURN collection
 END FUNCTION

2. Write pseudocode for quicksort.

A: 

FUNCTION quickSort(array,start,end)
	IF (start < end)
		SET Pi = partition(array,start,end)
		CALL quickSort(array, start, pi -1)
		CALL quickSort(array, pi + 1, end)

3. We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

A: Both bubble sort and quick sort have the least amount of steps, and iterate through the list the least amount of times. 

4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

A: It creates buckets for a certain set of data, sorts the data in those buckets, then arranges the buckets together. It's best for uniformed distribution.